name: Build preview APK and publish release
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (repo may be empty)
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0

      - name: Generate Android project (WebView loads embedded HTML wizard)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p app/src/main/java/com/apologiztome/prayeralarms
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/assets

          cat > settings.gradle <<'EOF'
          rootProject.name = "PrayerAlarmsConstantinePreview"
          include ':app'
          EOF

          cat > build.gradle <<'EOF'
          plugins {
              id 'com.android.application' version '8.5.2' apply false
              id 'org.jetbrains.kotlin.android' version '1.9.24' apply false
          }
          EOF

          cat > gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx4096m -Dkotlin.daemon.jvm.options=-Xmx2048m
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          android.enableJetifier=true
          EOF

          cat > app/build.gradle <<'EOF'
          plugins {
              id 'com.android.application'
              id 'org.jetbrains.kotlin.android'
          }

          android {
              namespace 'com.apologiztome.prayeralarms'
              compileSdk 34

              defaultConfig {
                  applicationId "com.apologiztome.prayeralarms"
                  minSdk 26
                  targetSdk 33
                  versionCode 1
                  versionName "1.0"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      shrinkResources false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
                  debug {
                      minifyEnabled false
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }
              kotlinOptions { jvmTarget = '17' }
          }

          dependencies {
              implementation 'androidx.core:core-ktx:1.13.1'
              implementation 'androidx.appcompat:appcompat:1.7.0'
              implementation 'com.google.android.material:material:1.12.0'
              implementation 'androidx.activity:activity-ktx:1.9.2'
              implementation 'androidx.webkit:webkit:1.11.0'
          }
          EOF

          cat > app/proguard-rules.pro <<'EOF'
          # no-op
          EOF

          cat > app/src/main/AndroidManifest.xml <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.INTERNET"/>
              <application
                  android:label="Prayer Alarms (Preview)"
                  android:allowBackup="true"
                  android:theme="@style/Theme.Material3.DayNight.NoActionBar">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          cat > app/src/main/res/values/strings.xml <<'EOF'
          <resources>
              <string name="app_name">Prayer Alarms (Preview)</string>
          </resources>
          EOF

          cat > app/src/main/java/com/apologiztome/prayeralarms/MainActivity.kt <<'EOF'
          package com.apologiztome.prayeralarms

          import android.os.Bundle
          import android.webkit.WebChromeClient
          import android.webkit.WebSettings
          import android.webkit.WebView
          import android.webkit.WebViewClient
          import androidx.appcompat.app.AppCompatActivity

          class MainActivity : AppCompatActivity() {
              private lateinit var web: WebView
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  web = WebView(this)
                  setContentView(web)
                  with(web.settings) {
                      javaScriptEnabled = true
                      domStorageEnabled = true
                      mediaPlaybackRequiresUserGesture = false
                      mixedContentMode = WebSettings.MIXED_CONTENT_COMPATIBILITY_MODE
                      allowFileAccess = true
                      allowContentAccess = true
                  }
                  WebView.setWebContentsDebuggingEnabled(true)
                  web.webViewClient = WebViewClient()
                  web.webChromeClient = WebChromeClient()
                  web.loadUrl("file:///android_asset/index.html")
              }
              override fun onDestroy() {
                  try {
                      web.loadUrl("about:blank")
                      web.stopLoading()
                      web.destroy()
                  } catch (_: Exception) {}
                  super.onDestroy()
              }
          }
          EOF

          # HTML preview (Home + Alarms + 8-step wizard + test ring)
          cat > app/src/main/assets/index.html <<'EOF'
          <!doctype html><html lang="en"><head>
          <meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
          <title>Prayer Alarms — Constantine (Preview)</title>
          <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
          <script src="https://cdn.jsdelivr.net/npm/dayjs@1/plugin/utc.js"></script>
          <script src="https://cdn.jsdelivr.net/npm/dayjs@1/plugin/timezone.js"></script>
          <style>
            :root{--green:#2E7D32;--gd:#1b5e20;--muted:#777}
            *{box-sizing:border-box}body{margin:0;font-family:system-ui,Segoe UI,Roboto,Arial}
            header{background:var(--green);color:#fff;padding:10px 14px;position:sticky;top:0;z-index:2}
            main{padding:12px;max-width:900px;margin:0 auto 70px}
            footer{position:fixed;inset:auto 0 0 0;background:var(--green);display:flex}
            .tab{flex:1;color:#fff;text-align:center;padding:10px;opacity:.9;cursor:pointer}.tab.active{background:var(--gd);opacity:1}
            .card{background:#fff;border:1px solid #e6ebf4;border-radius:12px;padding:14px;margin:10px 0}
            .muted{color:var(--muted);font-size:13px}
            .home-grid{display:grid;grid-template-columns:1fr 52px;gap:10px}
            .time-row{display:flex;align-items:baseline;gap:8px;margin:12px 0}
            .label{font-size:30px;color:#616161;flex:1}.time{font-size:28px;color:#9e9e9e}
            .icon-btn{background:transparent;border:none;cursor:pointer;padding:4px;color:#1976D2;font-size:20px}
            .btn{border:1px solid #d0d7e2;background:#f9fbff;color:#0b3a6d;border-radius:8px;padding:8px 10px;cursor:pointer}
            .btn-green{background:var(--green);border-color:var(--green);color:#fff}
            .alarm-title{font-size:18px;font-weight:600}
            .rel{position:relative}.side-v{display:flex;flex-direction:column;gap:6px;position:absolute;right:10px;top:10px}
            .actions{color:#1565C0;font-weight:700;margin-top:8px;cursor:pointer}
            .actions-row{display:none;gap:8px;margin-top:6px;flex-wrap:wrap}
            .modal{position:fixed;inset:0;background:rgba(0,0,0,.35);display:none;align-items:center;justify-content:center;z-index:3}
            .panel{background:#fff;border-radius:14px;width:min(820px,96%);max-height:92vh;display:flex;flex-direction:column}
            .wizard-nav{display:flex;gap:8px;justify-content:flex-end;padding:10px;border-top:1px solid #e6eaf3}
            .ring{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;align-items:center;justify-content:center;z-index:4}
            .ring .box{background:#101826;color:#eaf1ff;border-radius:16px;padding:18px;width:min(560px,92%)}
            .grid-3{display:grid;grid-template-columns:repeat(3,1fr);gap:10px}.np{width:70px}.divider{height:1px;background:#eceff5;margin:10px 0}
          </style></head><body>
          <header><b id="topTitle">Home - Muslim's App (Preview)</b></header>
          <main>
            <section id="screenHome">
              <div class="card home-grid">
                <div>
                  <div style="font-size:24px;color:#606060;text-align:center" id="gregDate">--/--/----</div>
                  <div style="font-size:18px;color:#9e9e9e;text-align:center;font-style:italic" id="hijriDate">—</div>
                  <div class="time-row"><div class="label">Fajr</div><div class="time" id="tFajr">--:--</div></div>
                  <div class="time-row"><div class="label">Sunrise</div><div class="time" id="tSunrise">--:--</div></div>
                  <div class="time-row"><div class="label">Zuhr</div><div class="time" id="tDhuhr">--:--</div></div>
                  <div class="time-row"><div class="label">Asr</div><div class="time" id="tAsr">--:--</div></div>
                  <div class="time-row"><div class="label">Maghrib</div><div class="time" id="tMaghrib">--:--</div></div>
                  <div class="time-row"><div class="label">Ishaa</div><div class="time" id="tIsha">--:--</div></div>
                  <div class="muted" id="homeStatus">Loading…</div>
                </div>
                <div style="display:flex;flex-direction:column;align-items:center;gap:10px">
                  <button class="icon-btn" id="homePlus" title="Increase offset">➕</button>
                  <button class="icon-btn" id="homeRefresh" title="Refresh times">🔄</button>
                  <button class="icon-btn" id="homeMinus" title="Decrease offset">➖</button>
                  <div class="muted">Offset: <span id="globalOffset">10</span> min</div>
                </div>
              </div>
            </section>
            <section id="screenAlarms" style="display:none">
              <div class="card">
                <div style="display:flex;align-items:center;gap:10px">
                  <div style="flex:1"><b>Alarms</b> — matches your 8-step wizard flow</div>
                  <button class="btn btn-green" id="btnAdd">＋ Add</button>
                </div>
                <div class="muted">Use ACTIONS to Edit/Test/Duplicate/Delete. Plus/Minus changes offset.</div>
              </div>
              <div id="alarmsContainer"></div>
            </section>
          </main>
          <footer>
            <div class="tab active" id="tabHome">Home</div>
            <div class="tab" id="tabAlarms">Alarms</div>
          </footer>

          <div class="modal" id="wizard">
            <div class="panel">
              <header style="background:#2E7D32;color:#fff;padding:10px 14px;border-top-left-radius:14px;border-top-right-radius:14px"><b>Edit Alarm</b></header>
              <div id="wizardBody" style="padding:16px;overflow:auto"></div>
              <div class="wizard-nav">
                <button class="btn" id="wBack">Back</button>
                <button class="btn btn-green" id="wNext">Next</button>
              </div>
            </div>
          </div>

          <div class="ring" id="ring">
            <div class="box">
              <div style="font-weight:700;font-size:20px" id="ringTitle">Alarm</div>
              <div style="color:#a3b3d7;margin-bottom:8px" id="ringSub">Ringing…</div>
              <div style="font-size:12px;color:#60708f">Preview: minutes are seconds to test quickly.</div>
              <div style="display:flex;gap:8px;margin-top:12px;flex-wrap:wrap">
                <button class="btn" id="btnDismiss">Dismiss</button>
                <button class="btn btn-green" id="btnSnooze">Snooze</button>
              </div>
            </div>
          </div>

          <script>
          dayjs.extend(dayjs_plugin_utc); dayjs.extend(dayjs_plugin_timezone);
          const API="https://api.aladhan.com/v1/timingsByCity?city=Constantine&country=Algeria&method=3";
          const STORAGE="preview_alarms_v1"; const STORAGE_OFFSET="preview_global_offset";
          const tzFmt="YYYY-MM-DD HH:mm"; let CITY_TZ="Africa/Algiers"; let globalOffset=parseInt(localStorage.getItem(STORAGE_OFFSET)||"10",10);
          function getAlarms(){try{return JSON.parse(localStorage.getItem(STORAGE)||"[]")}catch{return[]}}
          function saveAlarms(v){localStorage.setItem(STORAGE,JSON.stringify(v))}
          function upsert(cfg){const a=getAlarms();const i=a.findIndex(x=>x.id===cfg.id);if(i>=0)a[i]=cfg;else a.push(cfg);saveAlarms(a)}
          function del(id){saveAlarms(getAlarms().filter(x=>x.id!==id))}
          const escapeHtml=s=>(s||"").replace(/[&<>"']/g,m=>({ "&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;"}[m]));
          async function fetchTimings(date){const key=dayjs(date).format("DD-MM-YYYY");const res=await fetch(API+"&date="+key);const j=await res.json();const d=j.data;const tz=d.meta?.timezone||"Africa/Algiers";CITY_TZ=tz;return{tz, date:dayjs(date).format("YYYY-MM-DD"), greg:(d.date.gregorian.date||"").replace(/-/g,"/"), hijri:d.date.hijri.day+" "+d.date.hijri.month.en+" "+d.date.hijri.year, t:d.timings}}
          async function renderHome(){document.getElementById("globalOffset").textContent=globalOffset;document.getElementById("homeStatus").textContent="Loading…";try{const info=await fetchTimings(dayjs());const tz=info.tz;document.getElementById("gregDate").textContent=info.greg;document.getElementById("hijriDate").textContent=info.hijri;const hh=k=>dayjs.tz(`${info.date} ${info.t[k].slice(0,5)}`,tzFmt,tz).format("hh:mm A");document.getElementById("tFajr").textContent=hh("Fajr");document.getElementById("tSunrise").textContent=hh("Sunrise");document.getElementById("tDhuhr").textContent=hh("Dhuhr");document.getElementById("tAsr").textContent=hh("Asr");document.getElementById("tMaghrib").textContent=hh("Maghrib");document.getElementById("tIsha").textContent=hh("Isha");document.getElementById("homeStatus").textContent=`Constantine • ${tz}`}catch(e){document.getElementById("homeStatus").textContent="Failed to load";}}
          function titleFromPrayers(cfg){const a=[];if(cfg.prayers.includes("FAJR"))a.push("Fajr");if(cfg.includeSunrise)a.push("Sunrise");if(cfg.prayers.includes("DHUHR"))a.push("Zuhr");if(cfg.prayers.includes("ASR"))a.push("Asr");if(cfg.prayers.includes("MAGHRIB"))a.push("Maghrib");if(cfg.prayers.includes("ISHA"))a.push("Ishaa");return a.join(",")}
          function repeatText(cfg){if(cfg.repeatType==="ONE_TIME")return"One time";if(cfg.daysOfWeek.length===7)return"Everyday";const n=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];return cfg.daysOfWeek.map(i=>n[i]).join(", ")}
          async function computeNextRun(cfg){const now=dayjs();for(let d=0;d<8;d++){const dateObj=now.add(d,"day");const info=await fetchTimings(dateObj);const tz=info.tz;const choose=[];if(cfg.prayers.includes("FAJR"))choose.push(["Fajr","Fajr"]);if(cfg.includeSunrise)choose.push(["Sunrise","Sunrise"]);if(cfg.prayers.includes("DHUHR"))choose.push(["Dhuhr","Zuhr"]);if(cfg.prayers.includes("ASR"))choose.push(["Asr","Asr"]);if(cfg.prayers.includes("MAGHRIB"))choose.push(["Maghrib","Maghrib"]);if(cfg.prayers.includes("ISHA"))choose.push(["Isha","Ishaa"]);const dow=(dateObj.day()+6)%7;if(cfg.repeatType==="WEEKLY"&&!cfg.daysOfWeek.includes(dow))continue;const cands=choose.map(([k,l])=>{const base=dayjs.tz(`${info.date} ${info.t[k].slice(0,5)}`,tzFmt,tz);const fin=cfg.offsetDirection==="BEFORE"?base.subtract(cfg.offsetMinutes,"minute"):base.add(cfg.offsetMinutes,"minute");return{title:l,base,fin}}).filter(c=>d>0?true:c.fin.isAfter(now)).sort((a,b)=>a.fin-b.fin);if(cands.length){const n=cands[0];const diff=n.fin.diff(now);const h=Math.floor(diff/3600000);const m=Math.floor((diff/60000)%60);return `${n.title} (${n.base.format("hh:mm A")}) - After ${h} hours, ${m} min.`}}return"—"}
          async function renderAlarms(){const wrap=document.getElementById("alarmsContainer");wrap.innerHTML="";const arr=getAlarms();if(!arr.length){const c=document.createElement("div");c.className="card";c.innerHTML='<div class="muted">No alarms yet. Click “Add”.</div>';wrap.appendChild(c);return}for(const cfg of arr){const card=document.createElement("div");card.className="card rel";card.innerHTML=`
              <div style="display:flex;gap:10px;align-items:flex-start">
                <input type="checkbox" ${cfg.enabled?"checked":""} data-act="toggle">
                <div style="flex:1">
                  <div class="alarm-title">${escapeHtml(cfg.label||titleFromPrayers(cfg))}</div>
                  <div class="muted">${cfg.offsetDirection==="BEFORE"?"Before time":"After time"} by ${cfg.offsetMinutes} min</div>
                  <div class="muted">${repeatText(cfg)}</div>
                  <div class="muted" data-id="next">Calculating next…</div>
                  <div class="actions">ACTIONS</div>
                  <div class="actions-row">
                    <button class="btn" data-act="edit">Edit</button>
                    <button class="btn" data-act="test">Test</button>
                    <button class="btn" data-act="dup">Duplicate</button>
                    <button class="btn" data-act="del" style="background:#ffeaea;border-color:#ffbdbd;color:#b00020">Delete</button>
                  </div>
                </div>
                <div class="side-v">
                  <button class="icon-btn" data-act="plus">➕</button>
                  <button class="icon-btn" data-act="minus">➖</button>
                </div>
              </div>`;wrap.appendChild(card);
              const actions=card.querySelector(".actions");const row=card.querySelector(".actions-row");
              actions.addEventListener("click",()=>row.style.display=row.style.display==="flex"?"none":"flex");
              card.querySelector('[data-act="toggle"]').addEventListener("change",e=>{cfg.enabled=e.target.checked;upsert(cfg)});
              card.querySelector('[data-act="plus"]').addEventListener("click",()=>{cfg.offsetMinutes=Math.min(120,(cfg.offsetMinutes||0)+1);upsert(cfg);renderAlarms()});
              card.querySelector('[data-act="minus"]').addEventListener("click",()=>{cfg.offsetMinutes=Math.max(0,(cfg.offsetMinutes||0)-1);upsert(cfg);renderAlarms()});
              card.querySelector('[data-act="edit"]').addEventListener("click",()=>openWizard(cfg));
              card.querySelector('[data-act="dup"]').addEventListener("click",()=>{const copy=JSON.parse(JSON.stringify(cfg));copy.id=Date.now();copy.enabled=false;upsert(copy);renderAlarms()});
              card.querySelector('[data-act="del"]').addEventListener("click",()=>{del(cfg.id);renderAlarms()});
              card.querySelector('[data-act="test"]').addEventListener("click",()=>testRing(cfg));
              computeNextRun(cfg).then(txt=>{card.querySelector('[data-id="next"]').textContent=txt});
            }}

          // Wizard
          let wizardIdx=0, wizardCfg=null;
          const defaultCfg=()=>({id:Date.now(),enabled:true,prayers:["FAJR","DHUHR","ASR","MAGHRIB","ISHA"],includeSunrise:false,offsetMinutes:10,offsetDirection:"BEFORE",repeatType:"WEEKLY",daysOfWeek:[0,1,2,3,4,5,6],sound:"AZAN_MEKKAH",volume:80,vibrate:true,label:"",dismissMethod:"DEFAULT",snoozeMode:"NONE",snoozeMax:3,snoozeIntervalMin:5,autoStopAfterMin:1});
          function openWizard(existing){wizardIdx=0;wizardCfg=existing?JSON.parse(JSON.stringify(existing)):defaultCfg();document.getElementById("wizard").style.display="flex";renderStep()}
          function closeWizard(){document.getElementById("wizard").style.display="none"}
          document.getElementById("wBack").addEventListener("click",()=>{wizardIdx=Math.max(0,wizardIdx-1);renderStep()});
          document.getElementById("wNext").addEventListener("click",()=>{if(wizardIdx===6){upsert(wizardCfg);renderAlarms();closeWizard()}else{wizardIdx=Math.min(6,wizardIdx+1);renderStep()}})
          const chkTpl=(lab,key,checked)=>`<label><input type="checkbox" data-key="${key}" ${checked?"checked":""}/> ${lab}</label>`;
          const dayChk=(n,i,checked)=>`<label><input type="checkbox" data-day="${i}" ${checked?"checked":""}/> ${n}</label>`;
          function renderStep(){const b=document.getElementById("wizardBody");document.getElementById("wBack").disabled=wizardIdx===0;document.getElementById("wNext").textContent=wizardIdx===6?"Complete":"Next";const cfg=wizardCfg;
            if(wizardIdx===0){b.innerHTML=`<h2>Alarm Edit Wizard</h2><p>This wizard guides you to add or edit an alarm in easy steps.</p><div class="divider"></div><b>This will ${cfg.id?"edit":"create"}:</b><div class="muted">${escapeHtml(cfg.label||titleFromPrayers(cfg))}</div><div class="muted">${repeatText(cfg)}</div>`;return}
            if(wizardIdx===1){b.innerHTML=`<h2>Select times you need to set alarm</h2><div class="grid-3">
              ${chkTpl("Fajr","FAJR",cfg.prayers.includes("FAJR"))}${chkTpl("Sunrise","SUNRISE",cfg.includeSunrise)}${chkTpl("Zuhr","DHUHR",cfg.prayers.includes("DHUHR"))}
              ${chkTpl("Asr","ASR",cfg.prayers.includes("ASR"))}${chkTpl("Maghrib","MAGHRIB",cfg.prayers.includes("MAGHRIB"))}${chkTpl("Ishaa","ISHA",cfg.prayers.includes("ISHA"))}</div>
              <div class="divider"></div><h3>Before or After?</h3>
              <label><input type="radio" name="dir" value="BEFORE" ${cfg.offsetDirection==="BEFORE"?"checked":""}/> Before Time</label>
              <label style="margin-left:12px"><input type="radio" name="dir" value="AFTER" ${cfg.offsetDirection==="AFTER"?"checked":""}/> After Time</label>
              <div class="divider"></div><div>Hours <input class="np" id="offH" type="number" min="0" max="23" value="${Math.floor(cfg.offsetMinutes/60)}"/> &nbsp; Minutes <input class="np" id="offM" type="number" min="0" max="59" value="${cfg.offsetMinutes%60}"/></div>`;
              b.querySelectorAll('input[type=checkbox][data-key]').forEach(el=>el.addEventListener("change",()=>{if(el.dataset.key==="SUNRISE"){cfg.includeSunrise=el.checked;return}if(el.checked){if(!cfg.prayers.includes(el.dataset.key))cfg.prayers.push(el.dataset.key)}else{cfg.prayers=cfg.prayers.filter(k=>k!==el.dataset.key)}}));
              b.querySelectorAll('input[name=dir]').forEach(el=>el.addEventListener("change",()=>cfg.offsetDirection=el.value));
              const h=b.querySelector("#offH"), m=b.querySelector("#offM"); const upd=()=>{let H=Math.max(0,Math.min(23,parseInt(h.value||"0",10))),M=Math.max(0,Math.min(59,parseInt(m.value||"0",10)));cfg.offsetMinutes=H*60+M}; h.addEventListener("input",upd); m.addEventListener("input",upd); return}
            if(wizardIdx===2){b.innerHTML=`<h2>Select if you want to repeat alarm</h2>
              <label><input type="radio" name="rep" value="ONE_TIME" ${cfg.repeatType==="ONE_TIME"?"checked":""}/> One time</label>
              <label style="margin-left:12px"><input type="radio" name="rep" value="WEEKLY" ${cfg.repeatType==="WEEKLY"?"checked":""}/> Repeated alarm</label>
              <div class="divider"></div><h3>Select weekly days of repeating alarm</h3>
              <div style="display:grid;grid-template-columns:repeat(2,1fr);gap:8px">
                ${dayChk("Mon",0,cfg.daysOfWeek.includes(0))}${dayChk("Tue",1,cfg.daysOfWeek.includes(1))}
                ${dayChk("Wed",2,cfg.daysOfWeek.includes(2))}${dayChk("Thu",3,cfg.daysOfWeek.includes(3))}
                ${dayChk("Fri",4,cfg.daysOfWeek.includes(4))}${dayChk("Sat",5,cfg.daysOfWeek.includes(5))}
                ${dayChk("Sun",6,cfg.daysOfWeek.includes(6))}
              </div>`;
              b.querySelectorAll('input[name=rep]').forEach(el=>el.addEventListener("change",()=>cfg.repeatType=el.value));
              b.querySelectorAll('input[type=checkbox][data-day]').forEach(el=>el.addEventListener("change",()=>{const d=parseInt(el.dataset.day,10);const s=new Set(cfg.daysOfWeek);if(el.checked)s.add(d);else s.delete(d);cfg.daysOfWeek=[...s].sort()})); return}
            if(wizardIdx===3){b.innerHTML=`<h2>Select Alarm Sound</h2><div id="soundList"></div><div class="muted">Preview beeps tones only.</div>`;
              const sounds=[["NUCLEAR_ALERT","Nuclear Alert",880],["HAZARD_WARNING","Hazard Warning",660],["CAR_GUARD","Car Guard",780],["OLD_PEEP","Old Peep Alarm",520],["AZAN_END","Azan End",610],["AZAN_HAYYA","Azan Hayya",480],["AZAN_MEKKAH","Azan Mekkah",440],["AZAN_OTAYBI","Azan Otaybi",420],["HAZARD_TRAFFIC","Hazard Traffic",700]];
              const list=b.querySelector("#soundList");sounds.forEach(([k,t,f])=>{const row=document.createElement("div");row.style.display="flex";row.style.alignItems="center";row.style.gap="8px";row.innerHTML=`<label style="flex:1"><input type="radio" name="snd" value="${k}" ${cfg.sound===k?"checked":""}/> ${t}</label><button class="btn" data-f="${f}">▶</button>`;list.appendChild(row)});
              b.querySelectorAll('input[name=snd]').forEach(el=>el.addEventListener("change",()=>cfg.sound=el.value));
              b.querySelectorAll('button[data-f]').forEach(btn=>btn.addEventListener("click",()=>beep(parseInt(btn.dataset.f,10),cfg.volume))); return}
            if(wizardIdx===4){b.innerHTML=`<h2>Setting the details of alarm</h2>
              <div><b>Sound Volume</b></div><input id="vol" type="range" min="0" max="100" value="${cfg.volume}" style="width:100%"/>
              <div class="muted">Volume: <span id="volNum">${cfg.volume}</span>%</div><div class="divider"></div>
              <div style="display:flex;align-items:center;gap:8px"><b>Vibration</b><input id="vib" type="checkbox" ${cfg.vibrate?"checked":""}/></div>
              <div class="divider"></div><div><b>Alarm Label (Optional)</b></div>
              <input id="lbl" type="text" placeholder="Enter label..." value="${escapeHtml(cfg.label)}" style="width:100%;padding:8px;border-radius:8px;border:1px solid #d5dbe8"/>`;
              const vol=b.querySelector("#vol"),volNum=b.querySelector("#volNum");vol.addEventListener("input",()=>{cfg.volume=parseInt(vol.value,10);volNum.textContent=cfg.volume});
              b.querySelector("#vib").addEventListener("change",e=>cfg.vibrate=e.target.checked);
              b.querySelector("#lbl").addEventListener("input",e=>cfg.label=e.target.value); return}
            if(wizardIdx===5){b.innerHTML=`<h2>How do you want to stop alarm?</h2>
              <div style="display:flex;gap:10px">
                <div id="optDef" style="flex:1;border:2px solid ${cfg.dismissMethod==="DEFAULT"?"#2E7D32":"#d6e0f1"};border-radius:12px;padding:14px;cursor:pointer;text-align:center"><div style="font-size:40px">🔔</div><b>Default</b></div>
                <div id="optShake" style="flex:1;border:2px solid ${cfg.dismissMethod==="SHAKE"?"#2E7D32":"#d6e0f1"};border-radius:12px;padding:14px;cursor:pointer;text-align:center"><div style="font-size:40px">🤳</div><b>Phone Shaking</b></div>
              </div>`; const d=b.querySelector("#optDef"),s=b.querySelector("#optShake"); d.onclick=()=>{cfg.dismissMethod="DEFAULT";renderStep()}; s.onclick=()=>{cfg.dismissMethod="SHAKE";renderStep()}; return}
            if(wizardIdx===6){b.innerHTML=`<h2>How many snoozes can you get at maximum?</h2>
              <label><input type="radio" name="sn" value="NONE" ${cfg.snoozeMode==="NONE"?"checked":""}/> None</label>
              <label style="margin-left:12px"><input type="radio" name="sn" value="UNLIMITED" ${cfg.snoozeMode==="UNLIMITED"?"checked":""}/> Unlimited</label>
              <label style="margin-left:12px"><input type="radio" name="sn" value="CUSTOM" ${cfg.snoozeMode==="CUSTOM"?"checked":""}/> Customize</label>
              <div id="customBox" style="display:${cfg.snoozeMode==="CUSTOM"?"block":"none"}">
                <div>Max <input class="np" id="snMax" type="number" min="1" max="10" value="${cfg.snoozeMax}"/> &nbsp; Interval (min) <input class="np" id="snInt" type="number" min="1" max="30" value="${cfg.snoozeIntervalMin}"/></div>
              </div><div class="divider"></div><b>Automatically stop alarm after</b>
              <select id="autoStop" style="padding:8px;border-radius:8px;border:1px solid #d5dbe8">
                ${[1,3,5,10].map(v=>`<option value="${v}" ${cfg.autoStopAfterMin===v?"selected":""}>After ${v} min.</option>`).join("")}
              </select><div class="muted" style="margin-top:6px">Preview note: minutes act as seconds.</div>`;
              b.querySelectorAll('input[name=sn]').forEach(el=>el.addEventListener("change",()=>{cfg.snoozeMode=el.value;b.querySelector("#customBox").style.display=el.value==="CUSTOM"?"block":"none"}));
              b.querySelector("#snMax")?.addEventListener("input",e=>cfg.snoozeMax=parseInt(e.target.value||"1",10));
              b.querySelector("#snInt")?.addEventListener("input",e=>cfg.snoozeIntervalMin=parseInt(e.target.value||"1",10));
              b.querySelector("#autoStop").addEventListener("change",e=>cfg.autoStopAfterMin=parseInt(e.target.value,10)); return}
          }
          // Tone preview + ring
          let ringOsc=null, ringCtx=null, ringTimer=null, ringSnooze=0;
          function beep(freq=440,vol=80){try{const c=new (window.AudioContext||window.webkitAudioContext)();const o=c.createOscillator(),g=c.createGain();o.frequency.value=freq;g.gain.value=Math.max(0,Math.min(1,vol/100));o.connect(g).connect(c.destination);o.start();setTimeout(()=>{o.stop();c.close()},800)}catch(e){}}
          function startToneLoop(freq=440,vol=80){ringCtx=new (window.AudioContext||window.webkitAudioContext)();ringOsc=ringCtx.createOscillator();const g=ringCtx.createGain();ringOsc.frequency.value=freq;g.gain.value=Math.max(0,Math.min(1,vol/100));ringOsc.connect(g).connect(ringCtx.destination);ringOsc.start()}
          function stopTone(){try{ringOsc?.stop();ringCtx?.close()}catch(e){} ringOsc=null;ringCtx=null}
          function testRing(cfg){ringSnooze=0;document.getElementById("ring").style.display="flex";document.getElementById("ringTitle").textContent=cfg.label||titleFromPrayers(cfg)||"Alarm";document.getElementById("ringSub").textContent=cfg.dismissMethod==="SHAKE"?"Shake to dismiss (preview)":"Tap Dismiss to stop";const f={NUCLEAR_ALERT:880,HAZARD_WARNING:660,CAR_GUARD:780,OLD_PEEP:520,AZAN_END:610,AZAN_HAYYA:480,AZAN_MEKKAH:440,AZAN_OTAYBI:420,HAZARD_TRAFFIC:700}[cfg.sound]||440;startToneLoop(f,cfg.volume);if(cfg.vibrate&&navigator.vibrate){navigator.vibrate([0,500,500,500,500,500])}clearTimeout(ringTimer);ringTimer=setTimeout(()=>dismissRing(),cfg.autoStopAfterMin*1000);if(cfg.dismissMethod==="SHAKE"){let last=0;const motion=e=>{const a=e.accelerationIncludingGravity||{};const mag=Math.sqrt((a.x||0)**2+(a.y||0)**2+(a.z||0)**2);const now=Date.now();if(now-last<200)return;last=now;if(mag>25){dismissRing();window.removeEventListener("devicemotion",motion)}};window.addEventListener("devicemotion",motion)}}
          function dismissRing(){stopTone();navigator.vibrate&&navigator.vibrate(0);clearTimeout(ringTimer);document.getElementById("ring").style.display="none"}
          function snoozeRing(cfg){if(cfg.snoozeMode==="NONE")return;if(cfg.snoozeMode==="CUSTOM"&&ringSnooze>=cfg.snoozeMax){document.getElementById("ringSub").textContent="Max snoozes reached";return}ringSnooze++;stopTone();navigator.vibrate&&navigator.vibrate(0);clearTimeout(ringTimer);document.getElementById("ringSub").textContent=`Snoozed ${cfg.snoozeIntervalMin} min (preview sec)`;setTimeout(()=>testRing(cfg),cfg.snoozeIntervalMin*1000)}
          document.getElementById("btnDismiss").onclick=dismissRing;
          document.getElementById("btnSnooze").onclick=()=>{const l=getAlarms();const cfg=l.find(a=>a.enabled)||l[0];if(cfg)snoozeRing(cfg)}

          // Nav + events
          document.getElementById("tabHome").onclick=()=>{document.getElementById("screenHome").style.display="";document.getElementById("screenAlarms").style.display="none";document.getElementById("tabHome").classList.add("active");document.getElementById("tabAlarms").classList.remove("active");document.getElementById("topTitle").textContent="Home - Muslim's App (Preview)"}
          document.getElementById("tabAlarms").onclick=()=>{document.getElementById("screenHome").style.display="none";document.getElementById("screenAlarms").style.display="";document.getElementById("tabAlarms").classList.add("active");document.getElementById("tabHome").classList.remove("active");document.getElementById("topTitle").textContent="Alarms - Muslim's App (Preview)"}
          document.getElementById("homeRefresh").onclick=renderHome;
          document.getElementById("homePlus").onclick=()=>{globalOffset=Math.min(120,globalOffset+1);localStorage.setItem(STORAGE_OFFSET,String(globalOffset));document.getElementById("globalOffset").textContent=globalOffset}
          document.getElementById("homeMinus").onclick=()=>{globalOffset=Math.max(0,globalOffset-1);localStorage.setItem(STORAGE_OFFSET,String(globalOffset));document.getElementById("globalOffset").textContent=globalOffset}
          document.getElementById("btnAdd").onclick=()=>openWizard();

          // Alarms list rendering helpers + init
          function repeatEveryday(){return[0,1,2,3,4,5,6]}
          function seedIfEmpty(){if(getAlarms().length)return;saveAlarms([{id:Date.now()-2,enabled:true,prayers:["FAJR","DHUHR","ASR","MAGHRIB","ISHA"],includeSunrise:false,offsetMinutes:21,offsetDirection:"BEFORE",repeatType:"WEEKLY",daysOfWeek:repeatEveryday(),sound:"AZAN_MEKKAH",volume:80,vibrate:true,label:"Fajr,Zuhr,Asr,Maghrib,Ishaa",dismissMethod:"DEFAULT",snoozeMode:"NONE",snoozeMax:3,snoozeIntervalMin:5,autoStopAfterMin:1},{id:Date.now()-1,enabled:true,prayers:["FAJR"],includeSunrise:false,offsetMinutes:31,offsetDirection:"BEFORE",repeatType:"WEEKLY",daysOfWeek:repeatEveryday(),sound:"AZAN_MEKKAH",volume:80,vibrate:true,label:"Fajr",dismissMethod:"DEFAULT",snoozeMode:"NONE",snoozeMax:3,snoozeIntervalMin:5,autoStopAfterMin:1}] )}
          seedIfEmpty(); renderHome(); renderAlarms();
          </script>
          </body></html>
          EOF

      - name: Build with Gradle 8.5 (no wrapper)
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.5
          arguments: assembleDebug

      - name: Prepare artifact
        run: |
          mkdir -p release
          cp app/build/outputs/apk/debug/app-debug.apk release/PrayerAlarms-Constantine-preview.apk

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: preview-${{ github.run_number }}
          name: Preview ${{ github.run_number }}
          draft: false
          prerelease: true
          files: release/PrayerAlarms-Constantine-preview.apk
